#!/usr/bin/env node

'use strict'

const gitclone = require('git-clone')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const rm = require('rimraf').sync
const chalk = require('chalk')
const inquirer = require('inquirer')
const tmpls = require('../tmpls.json');

const fs = require('fs');
const exec = require('child_process').exec;


function run(cmd, fn){
  exec(cmd, function (error, log, warn) {
    if (warn !== null) {
      console.log('')
      console.log(chalk.yellow(warn))
      console.log('')
    }
    if (log !== null) {
      console.log('')
      console.log(log)
      console.log('')
    }
    if (error !== null) {
      console.log('' + chalk.red(error));
      process.exit()
    }
    fn();
  });
};


program
  .usage('<command>')

// list all templates
program
  .command('ls')
  .description('list templates')
  .action(() => {
    console.log(chalk.gray('Generate  all :'));
    console.log();
    for (let key in tmpls) {
      console.log(chalk.green(`gname: ${key}`))
    }
    process.exit()
  })

// init some template
program
  .command('i')
  .description('pplgin init template')
  .action(() => {
    init();
  })

// help
program.on('--help', function() {
  console.log('Examples:')
  console.log()
  console.log(chalk.gray('# create a new project'))
  console.log('$ pplgin init my-project[name]')
  console.log()
})

process.on('exit', () => {
  console.log()
})


program.parse(process.argv)

if (!program.args.length) {
  program.help()
}



function init() {

  let rawName = program.args[0] //文件位置
  let _type = program.args[1] //初始化 哪种类型的项目

  if (!rawName || !_type) {
    console.error(`Dir or Tmplate must not empty`)
    process.exit()
  }

  let inPlace = !rawName || rawName === '.'
  let name = inPlace ? path.relative('../', process.cwd()) : rawName
  let toDir = path.resolve(rawName || '.')


  /**
   * 如果存在文件夹
   * @createTime           2016-08-16T23:46:35+0800
   */
  if (exists(toDir)) {
    inquirer.prompt([{
      type: 'confirm',
      message: inPlace ? 'Generate project in current directory?' : 'Target directory exists. Continue?',
      name: 'ok'
    }]).then((answers) => {
      if (answers.ok) {
        rm(toDir)
        downloadTmpl(toDir, _type);
      }
    })
  } else {
    downloadTmpl(toDir, _type);
  }



  function downloadTmpl(_dir, type) {
    var spinner = ora('Template init ...')
    spinner.start();

    if (!_type || !tmpls.hasOwnProperty(_type)) {
      spinner.fail();
      console.error(chalk.red(`Failed to init ${_type} `) + `"${chalk.blue.bold(_type)}" not in templates`)
      process.exit()
    }

    let url = tmpls[_type]


    gitclone(url, _dir, (err) => {
      if (err) {
        process.on('exit', function() {
          rm(_dir)
        })
        spinner.fail();
        console.error(`Failed to download repo ${chalk.magenta.underline(url)} error: ${chalk.red(JSON.stringify(err))}`)
        return;
      }
      spinner.succeed();
      console.log(chalk.green('\n √ Generation completed!'))
    })
  }
}
