#!/usr/bin/env node

'use strict'

const gitclone = require('git-clone')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const rm = require('rimraf').sync
const chalk = require('chalk')
const inquirer = require('inquirer')
const tmpls = require('../tmpls.json');

const fs = require('fs');
const exec = require('child_process').exec;
const {
  spawn
} = require('child_process')

function run(cmd, fn) {
  exec(cmd, function(error, log, warn) {
    if (warn !== null) {
      console.log('')
      console.log(chalk.yellow(warn))
      console.log('')
    }
    if (log !== null) {
      console.log('')
      console.log(log)
      console.log('')
    }
    if (error !== null) {
      console.log('' + chalk.red(error));
      process.exit()
    }
    fn();
  });
};


program
  .usage('<command>')

// list all templates
program
  .command('ls')
  .description('list templates')
  .action(() => {
    console.log(chalk.gray('Generate  all :'));
    console.log();
    for (let key in tmpls) {
      console.log(chalk.green(`gname: ${key}`))
    }
    process.exit()
  })

// init some template
program
  .command('i')
  .description('pplgin init template')
  .action(() => {
    init();
  })

// help
program.on('--help', function() {
  console.log('Examples:')
  console.log()
  console.log(chalk.gray('# create a new project'))
  console.log('$ pplgin init my-project[name] template')
  console.log()
})

process.on('exit', () => {
  console.log()
})


program.parse(process.argv)

if (!program.args.length) {
  program.help()
}



function init() {
  let rawName = program.args[0]
  if (!rawName) {
    console.error(`ProjectName must not be empty`)
    process.exit()
  }

  let inPlace = !rawName || rawName === '.'
  let name = inPlace ? path.relative('../', process.cwd()) : rawName
  let toDir = path.resolve(rawName || '.')

  inquirer.prompt({
    type: 'list',
    name: 'selected',
    message: "Select template you need?",
    choices: Object.keys(tmpls)
  }).then(({ selected }) => {
    let _type = selected;
    if (exists(toDir)) {
      inquirer.prompt([{
        type: 'confirm',
        message: inPlace ? 'Generate project in current directory?' : 'Target directory exists. Continue?',
        name: 'ok'
      }]).then((answers) => {
        if (answers.ok) {
          rm(toDir)
          downloadTmpl(toDir, _type);
        }
      })
    } else {
      downloadTmpl(toDir, _type);
    }
  });
}

/**
 * [downloadTmpl download from git]
 * @author  johnnyjiang
 * @email               johnnyjiang813@gmail.com
 */
function downloadTmpl(_dir, _type) {
  let spinner = ora('Template check ...')
  spinner.start();
  if (!_type || !tmpls.hasOwnProperty(_type)) {
    spinner.fail();
    console.error(chalk.red(`failed to check ${_type} `) + `"${chalk.blue.bold(_type)}" not in templates`)
    process.exit()
  }
  spinner.succeed('Template check success!')

  let spinnerLoad = ora('Template Dowloading ...')
  spinnerLoad.start()

  let url = tmpls[_type]


  gitclone(url, _dir, (err) => {
    if (err) {
      process.on('exit', function() {
        rm(_dir)
      })
      spinner.fail();
      console.error(`failed to download repo ${chalk.magenta.underline(url)} error: ${chalk.red(JSON.stringify(err))}`)
      return;
    }
    spinnerLoad.succeed('Template Dowloading success!');
    installDep(_dir)
  })
}


function installDep(_dir) {
  const sp = spawn('yarn', [], {
    stdio: 'pipe',
    cwd: _dir
  })
  sp.stdout.pipe(process.stdout)
  sp.stderr.pipe(process.stderr)
  sp.on('error', err => {
    console.error(`fail to install dependencies ${chalk.red(JSON.stringify(err))}`)
  })
  sp.on('close', code => {
    if (code === 0) {
     console.log(chalk.green('\n âˆš Generation completed!'))
    }
  })
}